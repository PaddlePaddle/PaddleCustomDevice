# Docker Image for PaddlePaddle ubuntu develop base environment

FROM ubuntu:18.04
LABEL maintainer="PaddlePaddle Authors <paddle-dev@baidu.com>"

RUN apt-get update && apt-get install -y apt-utils
RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata
RUN apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa && add-apt-repository ppa:ubuntu-toolchain-r/test
RUN apt-get update && apt-get install -y curl wget vim git unzip unrar tar xz-utils libssl-dev bzip2 gzip make libgcc-s1 sudo openssh-server \
            coreutils ntp language-pack-zh-hans python-qt4 libsm6 libxext6 libxrender-dev libgl1-mesa-glx libsqlite3-dev libopenblas-dev \
            bison graphviz libjpeg-dev zlib1g zlib1g-dev automake locales swig net-tools libtool module-init-tools numactl libnuma-dev \
            openssl libffi-dev pciutils libblas-dev gfortran libblas3 liblapack-dev liblapack3 default-jre screen tmux gdb lldb gcc g++

# add bash envs
COPY root/ /root/

# GCC 8.2
WORKDIR /opt
RUN wget -q https://paddle-ci.gz.bcebos.com/gcc-8.2.0.tar.xz && \
    tar -xvf gcc-8.2.0.tar.xz && cd gcc-8.2.0 && \
    unset LIBRARY_PATH CPATH C_INCLUDE_PATH PKG_CONFIG_PATH CPLUS_INCLUDE_PATH INCLUDE && \
    ./contrib/download_prerequisites && \
    cd .. && mkdir temp_gcc82 && cd temp_gcc82 && \
    ../gcc-8.2.0/configure --prefix=/opt/compiler/gcc-8.2 --enable-threads=posix --disable-checking --disable-multilib && \
    make -j8 && make install && \
    cd .. && rm -rf temp_gcc82 && rm -rf gcc-8.2.0* && \
    cd /usr/lib/aarch64-linux-gnu && \
    mv libstdc++.so.6 libstdc++.so.6.bak && mv libstdc++.so.6.0.25 libstdc++.so.6.0.25.bak && \
    ln -s /opt/compiler/gcc-8.2/lib64/libgfortran.so.5 /usr/lib/aarch64-linux-gnu/libstdc++.so.5 && \
    ln -s /opt/compiler/gcc-8.2/lib64/libstdc++.so.6   /usr/lib/aarch64-linux-gnu/libstdc++.so.6 && \
    cp /opt/compiler/gcc-8.2/lib64/libstdc++.so.6.0.25 /usr/lib/aarch64-linux-gnu && \
    cd /usr/bin && mv gcc gcc.bak && mv g++ g++.bak && \
    ln -s /opt/compiler/gcc-8.2/bin/gcc /usr/bin/gcc && \
    ln -s /opt/compiler/gcc-8.2/bin/g++ /usr/bin/g++
ENV PATH=/opt/compiler/gcc-8.2/bin:$PATH
ENV LD_LIBRARY_PATH=/opt/compiler/gcc-8.2/lib:/opt/compiler/gcc-8.2/lib64:$LD_LIBRARY_PATH

# cmake 3.19
WORKDIR /opt
RUN wget -q https://cmake.org/files/v3.19/cmake-3.19.8-Linux-aarch64.tar.gz && \
    tar -zxf cmake-3.19.8-Linux-aarch64.tar.gz && rm cmake-3.19.8-Linux-aarch64.tar.gz && \
    mv cmake-3.19.8-Linux-aarch64 cmake-3.19
ENV PATH=/opt/cmake-3.19/bin:${PATH}

# install python3.7 and pip
RUN apt-get install -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa && apt-get update -y 
RUN apt-get install -y python3.7 python3.7-dev python3-distutils python3.7-venv python3.7-venv
RUN curl -s -q https://bootstrap.pypa.io/get-pip.py | /usr/bin/python3.7

# create venv and activate
RUN /usr/bin/python3.7 -m venv /opt/py37env
# update env
ENV PATH=/opt/py37env/bin:$PATH
RUN echo "source /opt/py37env/bin/activate" >> /root/.bashrc
# upgrade pip and setuptools
RUN pip install --upgrade pip setuptools wheel

# install pylint and pre-commit
RUN pip install pre-commit==2.17.0 pylint pytest astroid isort coverage qtconsole gitpython
RUN pip install attrs pyyaml pathlib2 scipy requests psutil Cython clang-format==13.0.0
RUN pip install PyGithub distro

# add more libs
RUN apt-get update && apt-get install libprotobuf-dev protobuf-compiler libprotoc-dev lsof libgeos-dev \
    pkg-config libhdf5-100 libhdf5-dev lrzsz libsndfile1 tree ninja-build -y

# install Paddle requirement
RUN wget https://raw.githubusercontent.com/PaddlePaddle/Paddle/develop/python/requirements.txt -O requirements.txt && \
    pip install -r requirements.txt && rm -rf requirements.txt
RUN wget https://raw.githubusercontent.com/PaddlePaddle/Paddle/develop/python/unittest_py/requirements.txt -O requirements.txt && \
    pip install -r requirements.txt && rm -rf requirements.txt

# # Install Go and glide
# RUN wget -qO- https://golang.org/dl/go1.16.5.linux-arm64.tar.gz | \
#     tar -xz -C /usr/local && \
#     mkdir /root/gopath && \
#     mkdir /root/gopath/bin && \
#     mkdir /root/gopath/src
# ENV GOROOT=/usr/local/go GOPATH=/root/gopath
# # should not be in the same line with GOROOT definition, otherwise docker build could not find GOROOT.
# ENV PATH=${PATH}:${GOROOT}/bin:${GOPATH}/bin
# # install glide
# RUN curl -s -q https://glide.sh/get | sh

# git credential to skip password typing
RUN git config --global credential.helper store

# Fix locales to en_US.UTF-8
RUN localedef -i en_US -f UTF-8 en_US.UTF-8

# patchelf 0.14.5 - https://github.com/NixOS/patchelf/pull/216
RUN wget -O /opt/0.14.5.tar.gz https://github.com/NixOS/patchelf/archive/refs/tags/0.14.5.tar.gz && \
    cd /opt && tar xzf 0.14.5.tar.gz && cd /opt/patchelf-0.14.5 && ./bootstrap.sh && ./configure && \
    make && make install && cd /opt && rm -rf patchelf-0.14.5 && rm -rf 0.14.5.tar.gz

# ccache 3.7.9
RUN wget -q https://paddle-ci.gz.bcebos.com/ccache-3.7.9.tar.gz && \
    tar xf ccache-3.7.9.tar.gz && mkdir /usr/local/ccache-3.7.9 && cd ccache-3.7.9 && \
    ./configure -prefix=/usr/local/ccache-3.7.9 && \
    make -j8 && make install && cd .. && rm -rf ccache-3.7.9* && \
    ln -s /usr/local/ccache-3.7.9/bin/ccache /usr/local/bin/ccache

# Configure OpenSSH server. c.f. https://docs.docker.com/engine/examples/running_ssh_service
RUN mkdir /var/run/sshd && echo 'root:root' | chpasswd && \
    sed -ri 's/^PermitRootLogin\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config
CMD source ~/.bashrc

# Clean
RUN apt-get clean -y
RUN pip cache purge

# install gcc-10 for baidu icoding on aarch64
RUN wget -q https://bcloud-buildkit.bj.bcebos.com/build_env/gcc/ampere/gcc-10-with-glibc2.33.tar.gz && \
    tar xf gcc-10-with-glibc2.33.tar.gz -C /opt/compiler/ && rm -rf gcc-10-with-glibc2.33.tar.gz

# Create /lib64/ld-linux-aarch64.so.1
RUN umask 0022 && \
    if [ ! -d "/lib64" ]; \
    then \
        mkdir /lib64 && ln -sf /lib/ld-linux-aarch64.so.1 /lib64/ld-linux-aarch64.so.1; \
    fi

EXPOSE 22
