# Docker Image for PaddlePaddle ubuntu develop base environment

FROM ubuntu:18.04
LABEL maintainer="PaddlePaddle Authors <paddle-dev@baidu.com>"

RUN apt-get update && apt-get install -y apt-utils
RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata
RUN apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa && add-apt-repository ppa:ubuntu-toolchain-r/test
RUN apt-get update && apt-get install -y curl wget vim git unzip unrar tar xz-utils libssl-dev bzip2 gzip make libgcc-s1 openssh-server \
            coreutils ntp language-pack-zh-hans python-qt4 libsm6 libxext6 libxrender-dev libgl1-mesa-glx libsqlite3-dev libopenblas-dev \
            bison libjpeg-dev zlib1g zlib1g-dev automake locales swig net-tools libtool module-init-tools numactl libnuma-dev liblzma-dev \
            openssl libffi-dev pciutils libblas-dev gfortran libblas3 liblapack-dev liblapack3 default-jre gdb lldb gcc g++ libbz2-dev

# add bash envs
COPY root/ /root/

# workdir
WORKDIR /opt

# GCC 8.2
RUN wget -q https://paddle-ci.gz.bcebos.com/gcc-8.2.0.tar.xz && \
    tar xf gcc-8.2.0.tar.xz && cd gcc-8.2.0 && \
    unset LIBRARY_PATH CPATH C_INCLUDE_PATH PKG_CONFIG_PATH CPLUS_INCLUDE_PATH INCLUDE && \
    ./contrib/download_prerequisites > /dev/null && cd .. && mkdir temp_gcc82 && cd temp_gcc82 && \
    ../gcc-8.2.0/configure --prefix=/opt/compiler/gcc-8.2 --enable-threads=posix --disable-checking --disable-multilib > /dev/null && \
    make -j16 > /dev/null && make install > /dev/null && cd .. && rm -rf temp_gcc82 && rm -rf gcc-8.2.0*
RUN cd /usr/lib/x86_64-linux-gnu && \
    mv libstdc++.so.6 libstdc++.so.6.bak && mv libstdc++.so.6.0.25 libstdc++.so.6.0.25.bak && \
    ln -s /opt/compiler/gcc-8.2/lib64/libgfortran.so.5 /usr/lib/x86_64-linux-gnu/libstdc++.so.5 && \
    ln -s /opt/compiler/gcc-8.2/lib64/libstdc++.so.6   /usr/lib/x86_64-linux-gnu/libstdc++.so.6 && \
    cp /opt/compiler/gcc-8.2/lib64/libstdc++.so.6.0.25 /usr/lib/x86_64-linux-gnu && \
    cd /usr/bin && mv gcc gcc.bak && mv g++ g++.bak && \
    ln -s /opt/compiler/gcc-8.2/bin/gcc /usr/bin/gcc && \
    ln -s /opt/compiler/gcc-8.2/bin/g++ /usr/bin/g++
ENV PATH=/opt/compiler/gcc-8.2/bin:$PATH
ENV LD_LIBRARY_PATH=/opt/compiler/gcc-8.2/lib:/opt/compiler/gcc-8.2/lib64:$LD_LIBRARY_PATH

# cmake 3.27.7
RUN wget -q https://cmake.org/files/v3.27/cmake-3.27.7-linux-x86_64.sh && \
    chmod +x cmake-3.27.7-linux-x86_64.sh && mkdir -p /opt/cmake-3.27.7 && \
    ./cmake-3.27.7-linux-x86_64.sh --prefix=/opt/cmake-3.27.7 --skip-license && \
    rm -rf cmake-3.27.7-linux-x86_64.sh
ENV PATH=/opt/cmake-3.27.7/bin:${PATH}

# Python 3.10.13 - default 3.6
RUN wget -q --no-check-certificate https://www.python.org/ftp/python/3.10.13/Python-3.10.13.tgz && \
    tar xzf Python-3.10.13.tgz && cd Python-3.10.13 && \
    CFLAGS="-Wformat" ./configure --prefix=/usr/local/ --enable-shared > /dev/null && \
    make -j16 > /dev/null && make altinstall > /dev/null && ldconfig && \
    cd ../ && rm -rf Python-3.10.13 && rm -rf Python-3.10.13.tgz
ENV LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH}
ENV CPLUS_INCLUDE_PATH=/usr/local/include/python3.10:${CPLUS_INCLUDE_PATH}

# create venv and activate
RUN /usr/local/bin/python3.10 -m venv /opt/py310
# update env
ENV PATH=/opt/py310/bin:$PATH
RUN echo "source /opt/py310/bin/activate" >> /root/.bashrc
# upgrade pip
RUN pip install --upgrade pip setuptools wheel

# install pylint and pre-commit
RUN pip install pre-commit==2.17.0 pylint pytest astroid isort coverage qtconsole distro
RUN pip install attrs pyyaml pathlib2 scipy requests psutil Cython clang-format==13.0.0

# add more libs
RUN apt-get update && apt-get install libprotobuf-dev protobuf-compiler libprotoc-dev lsof libgeos-dev \
    pkg-config libhdf5-100 libhdf5-dev lrzsz libsndfile1 tree ninja-build -y

# install Paddle requirement
RUN wget --no-check-certificate https://raw.githubusercontent.com/PaddlePaddle/Paddle/develop/python/requirements.txt -O requirements.txt && \
    pip install -r requirements.txt && rm -rf requirements.txt
RUN wget --no-check-certificate https://raw.githubusercontent.com/PaddlePaddle/Paddle/develop/python/unittest_py/requirements.txt -O requirements.txt && \
    pip install -r requirements.txt && rm -rf requirements.txt

# git credential to skip password typing
RUN git config --global credential.helper store

# Fix locales to en_US.UTF-8
RUN localedef -i en_US -f UTF-8 en_US.UTF-8

# patchelf 0.14.5 - https://github.com/NixOS/patchelf/pull/216
RUN wget -q --no-check-certificate https://github.com/NixOS/patchelf/archive/refs/tags/0.14.5.tar.gz && \
    tar xzf 0.14.5.tar.gz && cd patchelf-0.14.5 && \
    ./bootstrap.sh  > /dev/null && ./configure > /dev/null && \
    make -j16 > /dev/null && make install > /dev/null && \
    cd .. && rm -rf patchelf-0.14.5 && rm -rf 0.14.5.tar.gz

# ccache 3.7.9
RUN wget -q --no-check-certificate https://paddle-ci.gz.bcebos.com/ccache-3.7.9.tar.gz && \
    tar xf ccache-3.7.9.tar.gz && mkdir /usr/local/ccache-3.7.9 && cd ccache-3.7.9 && \
    ./configure -prefix=/usr/local/ccache-3.7.9 > /dev/null && \
    make -j16 > /dev/null && make install > /dev/null && \ 
    cd .. && rm -rf ccache-3.7.9 && rm -rf ccache-3.7.9.tar.gz && \
    ln -s /usr/local/ccache-3.7.9/bin/ccache /usr/local/bin/ccache

# Configure OpenSSH server. c.f. https://docs.docker.com/engine/examples/running_ssh_service
RUN mkdir /var/run/sshd && echo 'root:root' | chpasswd && \
    sed -ri 's/^PermitRootLogin\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config
CMD source ~/.bashrc

# Clean
RUN apt-get clean -y
RUN pip cache purge

EXPOSE 22
