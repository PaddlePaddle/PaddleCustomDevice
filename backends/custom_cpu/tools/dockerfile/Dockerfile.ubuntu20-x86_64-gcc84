# Docker Image for PaddlePaddle ubuntu develop base environment

FROM ubuntu:20.04
LABEL maintainer="PaddlePaddle Authors <paddle-dev@baidu.com>"

RUN apt-get update && apt-get install -y apt-utils
RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata
RUN apt-get update && apt-get install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && add-apt-repository ppa:ubuntu-toolchain-r/test

# install other requirements
RUN apt-get update && apt-get install -y curl wget vim git unzip unrar tar xz-utils libssl-dev bzip2 gzip make cmake sudo
RUN apt-get update && apt-get install -y coreutils ntp language-pack-zh-hans libsm6 libxext6 libxrender-dev libgl1-mesa-glx
RUN apt-get update && apt-get install -y bison graphviz libjpeg-dev zlib1g zlib1g-dev automake locales swig net-tools libtool
RUN apt-get update && apt-get install -y openssl libffi-dev pciutils libblas-dev libblas3 liblapack-dev liblapack3 screen gdb
RUN apt-get update && apt-get install -y openssh-server default-jre libsqlite3-dev libopenblas-dev libgcc-s1 gcc g++ gfortran

# add bash envs
COPY root/ /root/

# # install gcc-8.4.0
RUN apt-get install -y gcc-8 g++-8 gfortran-8
RUN update-alternatives --install /usr/bin/g++  g++  /usr/bin/g++-8  90 && \
    update-alternatives --install /usr/bin/gcc  gcc  /usr/bin/gcc-8  90 && \
    update-alternatives --install /usr/bin/gfortran  gfortran  /usr/bin/gfortran-8  90

# cmake 3.19
WORKDIR /opt
RUN wget -q https://cmake.org/files/v3.19/cmake-3.19.0-Linux-x86_64.tar.gz && \
    tar -zxf cmake-3.19.0-Linux-x86_64.tar.gz && rm cmake-3.19.0-Linux-x86_64.tar.gz && \
    mv cmake-3.19.0-Linux-x86_64 cmake-3.19
ENV PATH=/opt/cmake-3.19/bin:${PATH}

# install python3.7 and pip
RUN apt-get install -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa && apt-get update -y
RUN apt-get install -y python3.7 python3.7-dev python3-distutils python3.7-venv
RUN curl -s -q https://bootstrap.pypa.io/get-pip.py | /usr/bin/python3.7

# create venv and activate
RUN /usr/bin/python3.7 -m venv /opt/py37env
# update env
ENV PATH=/opt/py37env/bin:$PATH
RUN echo "source /opt/py37env/bin/activate" >> /root/.bashrc
# upgrade pip and setuptools
RUN pip install --upgrade pip setuptools wheel

# install pylint and pre-commit
RUN pip install pre-commit==2.17.0 pylint pytest astroid isort coverage qtconsole gitpython
RUN pip install attrs pyyaml pathlib2 scipy requests psutil Cython clang-format==13.0.0
RUN pip install PyGithub distro

# add more libs
RUN apt-get update && apt-get install libprotobuf-dev protobuf-compiler libprotoc-dev lsof libgeos-dev \
    pkg-config libhdf5-103 libhdf5-dev lrzsz libsndfile1 tree ninja-build -y

# install Paddle requirement
RUN wget https://raw.githubusercontent.com/PaddlePaddle/Paddle/develop/python/requirements.txt -O requirements.txt && \
    pip install -r requirements.txt && rm -rf requirements.txt
RUN wget https://raw.githubusercontent.com/PaddlePaddle/Paddle/develop/python/unittest_py/requirements.txt -O requirements.txt && \
    pip install -r requirements.txt && rm -rf requirements.txt

# # Install Go and glide
# RUN wget -qO- https://paddle-ci.cdn.bcebos.com/go1.8.1.linux-amd64.tar.gz | \
#     tar -xz -C /usr/local && \
#     mkdir /root/gopath && \
#     mkdir /root/gopath/bin && \
#     mkdir /root/gopath/src
# ENV GOROOT=/usr/local/go GOPATH=/root/gopath
# # should not be in the same line with GOROOT definition, otherwise docker build could not find GOROOT.
# ENV PATH=${PATH}:${GOROOT}/bin:${GOPATH}/bin
# # install glide
# RUN curl -s -q https://glide.sh/get | sh

# git credential to skip password typing
RUN git config --global credential.helper store

# Fix locales to en_US.UTF-8
RUN localedef -i en_US -f UTF-8 en_US.UTF-8

# patchelf 0.14.5 - https://github.com/NixOS/patchelf/pull/216
RUN wget -O /opt/0.14.5.tar.gz https://github.com/NixOS/patchelf/archive/refs/tags/0.14.5.tar.gz && \
    cd /opt && tar xzf 0.14.5.tar.gz && cd /opt/patchelf-0.14.5 && ./bootstrap.sh && ./configure && \
    make && make install && cd /opt && rm -rf patchelf-0.14.5 && rm -rf 0.14.5.tar.gz

# ccache 3.7.9
RUN wget -q https://paddle-ci.gz.bcebos.com/ccache-3.7.9.tar.gz && \
    tar xf ccache-3.7.9.tar.gz && mkdir /usr/local/ccache-3.7.9 && cd ccache-3.7.9 && \
    ./configure -prefix=/usr/local/ccache-3.7.9 && \
    make -j8 && make install && cd .. && rm -rf ccache-3.7.9* && \
    ln -s /usr/local/ccache-3.7.9/bin/ccache /usr/local/bin/ccache

# Configure OpenSSH server. c.f. https://docs.docker.com/engine/examples/running_ssh_service
RUN mkdir /var/run/sshd && echo 'root:root' | chpasswd && \
    sed -ri 's/^PermitRootLogin\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config
CMD source ~/.bashrc

# Clean
RUN apt-get clean -y
RUN pip cache purge

EXPOSE 22
