# Docker Image for PaddlePaddle ubuntu develop base environment

FROM ubuntu:20.04
LABEL maintainer="PaddlePaddle Authors <paddle-dev@baidu.com>"

RUN apt-get update && apt-get install -y apt-utils
RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata
RUN apt-get update && apt-get install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && add-apt-repository ppa:ubuntu-toolchain-r/test

# install other requirements
RUN apt-get update && apt-get install -y curl wget vim git unzip unrar tar xz-utils bzip2 \
    coreutils ntp language-pack-zh-hans libsm6 libxext6 libxrender-dev libgl1-mesa-glx make \
    bison graphviz libjpeg-dev zlib1g zlib1g-dev automake locales swig net-tools libtool gzip \
    openssl libffi-dev pciutils libblas-dev libblas3 liblapack-dev liblapack3 screen liblzma-dev \
    openssh-server default-jre libsqlite3-dev libopenblas-dev libgcc-s1 libbz2-dev libssl-dev gdb

# add bash envs
COPY root/ /root/

# # install gcc-9
RUN apt-get install -y gcc-9 g++-9 gfortran-9
RUN update-alternatives --install /usr/bin/g++  g++  /usr/bin/g++-9  90 && \
    update-alternatives --install /usr/bin/gcc  gcc  /usr/bin/gcc-9  90 && \
    update-alternatives --install /usr/bin/gfortran  gfortran  /usr/bin/gfortran-9  90

# cmake 3.27.7
WORKDIR /opt
RUN wget -q https://cmake.org/files/v3.27/cmake-3.27.7-linux-aarch64.sh && \
    chmod +x cmake-3.27.7-linux-aarch64.sh && mkdir -p /opt/cmake-3.27.7 && \
    ./cmake-3.27.7-linux-aarch64.sh --prefix=/opt/cmake-3.27.7 --skip-license && \
    rm -rf cmake-3.27.7-linux-aarch64.sh
ENV PATH=/opt/cmake-3.27.7/bin:${PATH}

# Python 3.9.17 - default 3.8
RUN wget -q https://www.python.org/ftp/python/3.9.17/Python-3.9.17.tgz && \
    tar -xzf Python-3.9.17.tgz && cd Python-3.9.17 && \
    CFLAGS="-Wformat" ./configure --prefix=/usr/local/ --enable-shared > /dev/null && \
    make -j16 > /dev/null && make altinstall > /dev/null && ldconfig && \
    cd ../ && rm -rf Python-3.9.17 && rm -rf Python-3.9.17.tgz

# create venv and activate
RUN /usr/local/bin/python3.9 -m venv /opt/py39
# update env
ENV PATH=/opt/py39/bin:$PATH
RUN echo "source /opt/py39/bin/activate" >> /root/.bashrc
# upgrade pip and setuptools
RUN pip install --upgrade pip setuptools wheel

# install pylint and pre-commit
RUN pip install pre-commit==2.17.0 pylint pytest astroid isort coverage qtconsole gitpython
RUN pip install attrs pyyaml pathlib2 scipy requests psutil Cython clang-format==13.0.0
RUN pip install PyGithub distro

# add more libs
RUN apt-get update && apt-get install libprotobuf-dev protobuf-compiler libprotoc-dev lsof libgeos-dev \
    pkg-config libhdf5-103 libhdf5-dev lrzsz libsndfile1 tree ninja-build -y

# install Paddle requirement
RUN wget https://raw.githubusercontent.com/PaddlePaddle/Paddle/develop/python/requirements.txt -O requirements.txt && \
    pip install -r requirements.txt && rm -rf requirements.txt
RUN wget https://raw.githubusercontent.com/PaddlePaddle/Paddle/develop/python/unittest_py/requirements.txt -O requirements.txt && \
    pip install -r requirements.txt && rm -rf requirements.txt

# # Install Go and glide
# RUN wget -qO- https://golang.org/dl/go1.16.5.linux-arm64.tar.gz | \
#     tar -xz -C /usr/local && \
#     mkdir /root/gopath && \
#     mkdir /root/gopath/bin && \
#     mkdir /root/gopath/src
# ENV GOROOT=/usr/local/go GOPATH=/root/gopath
# # should not be in the same line with GOROOT definition, otherwise docker build could not find GOROOT.
# ENV PATH=${PATH}:${GOROOT}/bin:${GOPATH}/bin
# # install glide
# RUN curl -s -q https://glide.sh/get | sh

# git credential to skip password typing
RUN git config --global credential.helper store

# Fix locales to en_US.UTF-8
RUN localedef -i en_US -f UTF-8 en_US.UTF-8

# patchelf 0.14.5 - https://github.com/NixOS/patchelf/pull/216
RUN wget -O /opt/0.14.5.tar.gz https://github.com/NixOS/patchelf/archive/refs/tags/0.14.5.tar.gz && \
    cd /opt && tar xzf 0.14.5.tar.gz && cd /opt/patchelf-0.14.5 && ./bootstrap.sh && ./configure && \
    make && make install && cd /opt && rm -rf patchelf-0.14.5 && rm -rf 0.14.5.tar.gz

# ccache 3.7.9
RUN wget -q https://paddle-ci.gz.bcebos.com/ccache-3.7.9.tar.gz && \
    tar xf ccache-3.7.9.tar.gz && mkdir /usr/local/ccache-3.7.9 && cd ccache-3.7.9 && \
    ./configure -prefix=/usr/local/ccache-3.7.9 && \
    make -j8 && make install && cd .. && rm -rf ccache-3.7.9* && \
    ln -s /usr/local/ccache-3.7.9/bin/ccache /usr/local/bin/ccache

# Configure OpenSSH server. c.f. https://docs.docker.com/engine/examples/running_ssh_service
RUN mkdir /var/run/sshd && echo 'root:root' | chpasswd && \
    sed -ri 's/^PermitRootLogin\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config
CMD source ~/.bashrc

# Clean
RUN apt-get clean -y
RUN pip cache purge

# Create /lib64/ld-linux-aarch64.so.1
RUN umask 0022 && \
    if [ ! -d "/lib64" ]; \
    then \
        mkdir /lib64 && ln -sf /lib/ld-linux-aarch64.so.1 /lib64/ld-linux-aarch64.so.1; \
    fi

EXPOSE 22
