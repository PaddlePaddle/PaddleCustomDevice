import os
from setuptools import setup, Distribution


packages = []
package_data = {}

def write_custom_op_api_py(init_file='python/paddle_custom_device/gcu/ops/__init__.py',
                           op_file='python/paddle_custom_device/gcu/ops/custom_ops.py',
                           lib_name='python/paddle_custom_device/libpaddle-custom-gcu.so'):
    import os
    os.environ['CUSTOM_DEVICE_ROOT']=''
    import sys
    import paddle
    op_names = paddle.utils.cpp_extension.extension_utils.load_op_meta_info_and_register_op(lib_name)
    api_content = [paddle.utils.cpp_extension.extension_utils._custom_api_content(op_name) for op_name in op_names]
    dirname = os.path.dirname(init_file)
    if not os.path.exists(dirname):
        os.makedirs(dirname)
    op_name_strs = '\n\n__all__ = [\n'
    for op_name in op_names:
        op_name_strs += '    \'' + op_name + '\',\n'
    op_name_strs += ']\n'
    with open(init_file, 'w') as f_init:
        f_init.write('''# THIS FILE IS GENERATED FROM PADDLEPADDLE SETUP.PY\n\n''')
        f_init.write('''from .custom_ops import *  # noqa: F403''')
        f_init.write(op_name_strs)
        f_init.write('''

def run_once(f):
    def wrapper(*args, **kwargs):
        if not wrapper.has_run:
            wrapper.has_run = True
            return f(*args, **kwargs)
    wrapper.has_run = False
    return wrapper


@run_once
def load_lib():
    import paddle
    import os
    for lib in os.listdir(os.getenv("CUSTOM_DEVICE_ROOT")):
        if lib.endswith(".so"):
            paddle.utils.cpp_extension.extension_utils.load_op_meta_info_and_register_op(
                lib
            )

load_lib()

''')
    with open(op_file, 'w') as f:
        f.write('''# THIS FILE IS GENERATED FROM PADDLEPADDLE SETUP.PY\n\n''')
        f.write('\n\n'.join(api_content))
        f.write('# ====== End of file ======\n')

def write_version_py(filename='python/paddle_custom_device/gcu/__init__.py'):
    cnt = '''# THIS FILE IS GENERATED FROM PADDLEPADDLE SETUP.PY
#
full_version  = '@OUTPUT_PADDLE_PACKAGE_VERSION@'
sdk_version  = '@TOPS_VERSION@'
git_commit_id = '@GIT_HASH@'

__all__ = ['version']

def version():
    """Get the version info of paddle custom gcu

    Returns:
        version: version of paddle custom gcu
        commit: the commit id of paddle custom gcu
        plugin: the plugin version of paddle custom gcu

    Examples:
        .. code-block:: python

            import paddle_custom_device

            paddle_custom_device.gcu.version()
            # version: 0.0.0.9e03b0a
            # commit: 9e03b0a42a530d07fb60e141ee618fc02595bd96
            # tops-sdk: 2.5.20231128
    """
    print('version:', full_version)
    print('commit:', git_commit_id)
    print('tops-sdk:', sdk_version)
'''
    dirname = os.path.dirname(filename)
    if not os.path.exists(dirname):
        os.makedirs(dirname)

    with open(filename, 'w') as f:
        f.write(cnt)


def write_init_py(filename='python/paddle_custom_device/__init__.py'):
    cnt = '''# THIS FILE IS GENERATED FROM PADDLEPADDLE SETUP.PY
#
from . import gcu # noqa: F401

__all__ = [  # noqa
    'gcu',
]

'''
    with open(filename, 'w') as f:
        f.write(cnt)


class BinaryDistribution(Distribution):
    def has_ext_modules(self):
        return True


def main():
    write_custom_op_api_py()
    write_version_py()
    write_init_py()

    setup(
        name = '@CMAKE_PROJECT_NAME@',
        version='@OUTPUT_PADDLE_PACKAGE_VERSION@',
        description='PaddlePaddle Custom Device GCU Plugin',
        long_description='',
        long_description_content_type="text/markdown",
        author_email="Paddle-better@baidu.com",
        maintainer="PaddlePaddle",
        maintainer_email="Paddle-better@baidu.com",
        project_urls={},
        license='Apache Software License',
        packages= [
            'paddle_custom_device',
            'paddle_custom_device.gcu',
            'paddle_custom_device.gcu.ops',
            'paddle_custom_device.gcu.passes'
        ],
        include_package_data=True,
        package_data = {
            '': ['*.so', '*.h', '*.py', '*.hpp'],
        },
        package_dir = {
            '': 'python',
        },
        zip_safe=False,
        distclass=BinaryDistribution,
        entry_points={
            'console_scripts': [
            ]
        },
        classifiers=[
        ],
        keywords='PaddlePaddle Custom Device GCU Plugin',
    )


if __name__ == '__main__':
    main()
