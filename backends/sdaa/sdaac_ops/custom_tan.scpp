// BSD 3- Clause License Copyright (c) 2024, Tecorigin Co., Ltd. All rights
// reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
// Neither the name of the copyright holder nor the names of its contributors
// may be used to endorse or promote products derived from this software
// without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY
// WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.

#include "custom_sdaacops.h"

__global__ void MyTan(const float *x, float *y, int num) {
  sdaa::sync_threads();

  if (threadDim >= num) {
    y[threadIdx] = tanf(x[threadIdx]);
  } else {
    int cal_times = num / threadDim;
    for (size_t i = 0; i < cal_times; ++i) {
      y[i * threadDim + threadIdx] = tanf(x[i * threadDim + threadIdx]);
    }
    int remain_times = num % threadDim;
    if (threadIdx < remain_times) {
      y[threadDim * cal_times + threadIdx] =
          tanf(x[threadDim * cal_times + threadIdx]);
    }
  }

  sdaa::sync_threads();
}

void custom_sdaa_tan_forward(sdaaStream_t stream,
                             const float *x,
                             float *y,
                             int num) {
  MyTan<<<1, stream>>>(x, y, num);
  return;
}
