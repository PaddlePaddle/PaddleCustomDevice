# BSD 3- Clause License Copyright (c) 2023, Tecorigin Co., Ltd. All rights
# reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY
# WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.

from __future__ import print_function

import numpy as np
import unittest

from op_test import OpTest
import paddle
from paddle.static import Program, program_guard

paddle.enable_static()
SEED = 1024


class TestFloor(OpTest):
    def setUp(self):
        self.set_sdaa()
        self.op_type = "floor"
        self.python_api = paddle.floor
        self.place = paddle.CustomPlace("sdaa", 0)
        self.init_dtype()
        self.init_shape()
        self.__class__.no_need_check_grad = True

        np.random.seed(SEED)
        x = np.random.uniform(-1, 1, self.shape).astype(self.dtype)
        out = np.floor(x)

        self.inputs = {"X": OpTest.np_dtype_to_base_dtype(x)}
        self.outputs = {"Out": out}

    def set_sdaa(self):
        self.__class__.use_custom_device = True

    def init_dtype(self):
        self.dtype = np.float32

    def init_shape(self):
        self.shape = [10, 12]

    def test_check_output(self):
        self.check_output_with_place(self.place)


class TestFloorFP16(TestFloor):
    def init_dtype(self):
        self.dtype = np.float16


class TestFloor_ZeroDim(TestFloor):
    def init_shape(self):
        self.shape = []


# In static graph mode, inplace strategy will not be used in Inplace APIs.
class TestStaticAutoGeneratedFloorAPI(unittest.TestCase):
    def setUp(self):
        paddle.enable_static()
        paddle.device.set_device("sdaa")
        self.init_data()
        self.set_np_compare_func()

    def init_data(self):
        np.random.seed(SEED)
        self.dtype = np.float32
        self.shape = [10, 20]
        self.np_x = np.random.uniform(-5, 5, self.shape).astype(self.dtype)

    def set_np_compare_func(self):
        self.np_compare = np.array_equal

    def executed_paddle_api(self, x):
        return x.floor()

    def executed_numpy_api(self, x):
        return np.floor(x)

    def test_api(self):
        main_prog = Program()
        with program_guard(main_prog, Program()):
            x = paddle.static.data(name="x", shape=self.shape, dtype=self.dtype)
            out = self.executed_paddle_api(x)

        exe = paddle.static.Executor(place=paddle.CPUPlace())
        fetch_x, fetch_out = exe.run(
            main_prog, feed={"x": self.np_x}, fetch_list=[x, out]
        )

        np.testing.assert_array_equal(fetch_x, self.np_x)
        self.assertTrue(self.np_compare(fetch_out, self.executed_numpy_api(self.np_x)))


class TestStaticInplaceAutoGeneratedFloorAPI(TestStaticAutoGeneratedFloorAPI):
    def executed_paddle_api(self, x):
        return x.floor_()


# In dygraph mode, inplace strategy will be used in Inplace APIs.
class TestDygraphAutoGeneratedFloorAPI(unittest.TestCase):
    def setUp(self):
        paddle.disable_static()
        paddle.device.set_device("sdaa")
        self.init_data()
        self.set_np_compare_func()

    def init_data(self):
        np.random.seed(SEED)
        self.dtype = np.float32
        self.shape = [10, 20]
        self.np_x = np.random.uniform(-5, 5, self.shape).astype(self.dtype)

    def set_np_compare_func(self):
        self.np_compare = np.array_equal

    def executed_paddle_api(self, x):
        return x.floor()

    def executed_numpy_api(self, x):
        return np.floor(x)

    def test_api(self):
        x = paddle.to_tensor(self.np_x, dtype=self.dtype)
        out = self.executed_paddle_api(x)

        self.assertTrue(
            self.np_compare(out.numpy(), self.executed_numpy_api(self.np_x))
        )


class TestDygraphInplaceAutoGeneratedFloorAPI(TestDygraphAutoGeneratedFloorAPI):
    def executed_paddle_api(self, x):
        return x.floor_()


class TestDygraphInplaceAutoGeneratedFloorFp16API(
    TestDygraphInplaceAutoGeneratedFloorAPI
):
    def init_data(self):
        np.random.seed(SEED)
        self.dtype = np.float16
        self.shape = [10, 20]
        self.np_x = np.random.uniform(-5, 5, self.shape).astype(self.dtype)


if __name__ == "__main__":
    unittest.main()
